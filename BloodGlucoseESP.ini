#include <ESP8266WiFi.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ArduinoJson.h>
#include <WiFiClientSecure.h>

// Wi-Fi mreža
const char* ssid = "YOUR_INTERNER_NAME";  /**********  CHANGE *********/
const char* password = "YOUR_INTERNER_PASSWORD";   /**********  CHANGE *********/


#define I2C_ADDR    0x27

#define LCD_COLS    16
#define LCD_ROWS    2

LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLS, LCD_ROWS);

unsigned long lastUpdateTime = 0;


String findValue(String json, String key) {
  int index = json.indexOf(key);
  if (index == -1)
    return "";

  index += key.length() + 3;

  int endIndex = json.indexOf('"', index);
  if (endIndex == -1)
    return "";

  return json.substring(index, endIndex);
}


String findValue1(String json, String key) {
  int index = json.indexOf(key);
  if (index == 0)
    return "";

  index += key.length() + 2;

  int endIndex = json.indexOf('"', index);
  if (endIndex == 0)
    return "";

  return json.substring(index, endIndex);
}

// Formatira vreme u formatu HH:MM
String formatTime(unsigned long long timestamp) {
  timestamp += 1 * 3600 * 1000;  // Cahange your time zone like if you in time zone +3 your line need to be like this:   timestamp += 3 * 3600 * 1000; or if your time zone is -3 need to be like this:   timestamp -= 3 * 3600 * 1000; 
  unsigned long seconds = timestamp / 1000; 
  int hours = (seconds % 86400) / 3600;
  int minutes = (seconds % 3600) / 60;

  return String(hours) + ":" + (minutes < 10 ? "0" : "") + String(minutes);
}


void updateSecondDisplay() {

  unsigned long elapsedTime = (millis() - lastUpdateTime) / 1000;
  lcd.setCursor(13, 0);
  if (elapsedTime < 10) {
    lcd.print("0"); 
  }
  lcd.print(elapsedTime); 
}

void setup() {
  Serial.begin(115200);
  delay(100);
  lcd.init();
  lcd.backlight();

  lcd.setCursor(4, 0);
  lcd.print("TRACKING");
  lcd.setCursor(1, 1);
  lcd.print("BLOOD GLUCOSE.");

  delay(5000);
  lcd.clear();

  Serial.println();
  Serial.print("Connecting to WiFi network:");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  lcd.clear();
  lcd.setCursor(1, 0);
  lcd.print("CONNECTING TO");
  lcd.setCursor(0, 1);
  lcd.print(ssid);

  // Čekanje na uspešno povezivanje
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  // Prikazivanje poruke o uspešnom povezivanju
  Serial.println("");
  Serial.println("Connected to WiFi network");
  Serial.println("Local IP address: ");
  Serial.println(WiFi.localIP());

  lcd.clear();
  lcd.setCursor(4, 0);
  lcd.print("LOADING...");
}

void loop() {
  // Resetujemo vreme poslednjeg ažuriranja na svakom prolasku kroz petlju
  lastUpdateTime = millis();

  // Inkrementirajte broj sekundi
  static int secondsCounter = 0;
  secondsCounter++;

  // Ako je broj sekundi veći od 99, postavite ga na 1
  if (secondsCounter > 99) {
    secondsCounter = 1;
  }

  // Dohvatanje podataka sa servisa
  WiFiClient client;
  if (!client.connect("YOUR_WEBSITE", 80)) { // Change to your webiste make sure your website not redirecting to HTTPS!  
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("ERROR");
    Serial.println("Error connecting to server");
    delay(5000);
    return;
  }
  
  Serial.println("Connected to server");
  
  client.print("GET /pebble HTTP/1.1\r\n");
  client.print("Host: YOUR_WEBSITE\r\n");  // Change to your webiste make sure your website not redirecting to HTTPS!  
  client.print("Connection: keep-alive\r\n");
  client.print("Accept: */*\r\n");
  client.print("User-Agent: Mozilla/4.0 (compatible; esp8266 Lua;)");
  client.print("\r\n\r\n");
  
  while (!client.available()) {
    delay(1000);
    Serial.println("Weiting to data....");
  }
  
  // Čitanje odgovora
  String header = client.readStringUntil('\r\n');
  if (header.indexOf("200") == -1) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("ERROR");

    Serial.println("Error reading data form server");
    delay(5000);
    return;
  }
  
  String response = client.readString();
  Serial.println("Server response:");
  Serial.println(response); 
  
  // Ručno parsiranje JSON odgovora
  String sgvStr = findValue(response, "sgv");
  String datetimeStr = findValue1(response, "datetime");

  Serial.println(datetimeStr);
  
  if (sgvStr == "" || datetimeStr == "") {
    Serial.println("ERROR reading JSON!");
    delay(5000);
    return;
  }
  
  float sgv = sgvStr.toFloat();
  

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("BG: ");     // Blood glucose 
  lcd.print(sgv);
  

  lcd.setCursor(0, 1);
  lcd.print("LR: "); // Last reading TIME
  lcd.print(formatTime(strtoull(datetimeStr.c_str(), NULL, 10))); 
  
 
  lcd.setCursor(13, 0);
  if (secondsCounter < 10) {
    lcd.print("0"); 
  }
  lcd.print(secondsCounter);

 
  delay(3000);
}
